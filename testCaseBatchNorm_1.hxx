//Code generated automatically by TMVA for Inference of Model file [testCaseBatchNorm_1.onnx] at [Thu Aug  5 11:35:10 2021] 
#include<cmath>
#include<vector>
namespace TMVA_SOFIE_testCaseBatchNorm_1{
namespace BLAS{
	extern "C" void sgemm_(const char * transa, const char * transb, const int * m, const int * n, const int * k,
	                       const float * alpha, const float * A, const int * lda, const float * B, const int * ldb,
	                       const float * beta, float * C, const int * ldc);
	extern "C" void sgemv_(const char * trans, const int * m, const int * n, const float * alpha, const float * A,
	                       const int * lda, const float * X, const int * incx, const float * beta, const float * Y, const int * incy);
	extern "C" void saxpy_(const int *n, const float* alpha, const float* x, const int *incx, float* y, const int* incy);
	extern "C" void scopy_(const int *n, const float* x, const int *incx, float* y, const int* incy);
	extern "C" void ssbmv_(const char *uplo, const int *n, const int *k, const float *alpha, const float *a, const int *lda,
	                       const float *x, const int *incx, const float *beta, float *y, const int *incy);
}//BLAS
float tensor_var[120] = {1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.11731648, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.23944092, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071, 1.4106071};
float tensor_mean[120] = {0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.610773981, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 0.373008311, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156, 1.85429156};
float tensor_bias[120] = {-0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -0.844192743, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -1.79882622, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535, -0.302479535};
float tensor_s[120] = {2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 2.34357285, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 0.356457889, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233, 1.21757233};
float tensor_y[120];
std::vector<float> infer(float* tensor_x){
	const int N =120;
	const int op_0_incx = 1;
	const int op_0_incy = 1;
	BLAS::scopy_(&N, tensor_x, &op_0_incx,tensor_y, &op_0_incy);

	float op_0_alpha = -1;
	BLAS::saxpy_(&N, &op_0_alpha, tensor_mean, &op_0_incx,tensor_y, &op_0_incy);

	for (size_t i = 0; i < 120; i++) {
		tensor_y[i] *= tensor_s[i] * tensor_var[i]; 
	}
	op_0_alpha = 1;
	BLAS::saxpy_(&N, &op_0_alpha, tensor_bias, &op_0_incx, tensor_y, &op_0_incy);

	std::vector<float> ret (tensor_y, tensor_y + sizeof(tensor_y) / sizeof(tensor_y[0]));
	return ret;
}
} //TMVA_SOFIE_testCaseBatchNorm_1
